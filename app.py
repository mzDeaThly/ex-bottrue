import discord
from discord.ext import commands
from playwright.async_api import async_playwright
import asyncio
import os

# ====== ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Environment Variables) ======
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
DEALER_USERNAME = os.getenv("DEALER_USERNAME")
DEALER_PASSWORD = os.getenv("DEALER_PASSWORD")

# ====== Discord Bot Setup ======
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ======
@bot.event
async def on_ready():
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß: {bot.user.name}")

@bot.command()
async def true(ctx, *args):
    allowed_channel_names = ["‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°"]  # <- ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á

    if ctx.channel.name not in allowed_channel_names:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ\n‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return

    await ctx.send("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")

    embed_loading = discord.Embed(
        title="üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•",
        description="1. ‚úì ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n2. ¬ª ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API...\n3. ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö...",
        color=0xf1c40f
    )
    await ctx.send(embed=embed_loading)

    try:
        if len(args) == 1:
            phone = args[0]
            fname, lname = "", ""
        elif len(args) == 2:
            fname, lname = args
            phone = ""
        else:
            await ctx.send("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏Ñ‡πà: `!true <‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£>` ‡∏´‡∏£‡∏∑‡∏≠ `!true <‡∏ä‡∏∑‡πà‡∏≠> <‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•>`")
            return

        result = await search_user_info(fname, lname, phone)
        embed = create_embed_result(fname, lname, phone, result)

        embed_done = discord.Embed(
            title="‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
            description="1. ‚úì ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n2. ‚úì ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n3. ‚úì ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á DM ‡πÅ‡∏•‡πâ‡∏ß",
            color=0x2ecc71
        )
        await ctx.send(embed=embed_done)

        await ctx.author.send(embed=embed)

    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

# ====== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ======
# ====== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ======
async def search_user_info(fname, lname, phone):
    print("--- search_user_info function started. ---")
    async with async_playwright() as p:
        print("Playwright context started.")
        browser = await p.chromium.launch(headless=True)
        print("Browser launched.")
        context = await browser.new_context()
        page = await context.new_page()
        print("New page created.")

        # STEP 1: Login
        print("Navigating to login page...")
        await page.goto("https://wzzo.truecorp.co.th/auth/realms/Dealer-Internet/protocol/openid-connect/auth?client_id=crmlite-prod-dealer&response_type=code&scope=openid%20profile&redirect_uri=https://crmlite-dealer.truecorp.co.th/&state=xyz&nonce=abc&response_mode=query&code_challenge_method=S256&code_challenge=AzRSFK3CdlHMiDq1DsuRGEY-p6EzTxexaIRyLphE9o4")
        print("Login page loaded. Filling credentials...")
        await page.fill('input[name="username"]', DEALER_USERNAME)
        await page.fill('input[name="password"]', DEALER_PASSWORD)
        print("Credentials filled. Clicking login...")
        await page.click('input[type="submit"]')
        print("Login clicked.")

        # STEP 2: Smart Search
        print("Navigating to SmartSearchPage...")
        await page.goto("https://crmlite-dealer.truecorp.co.th/SmartSearchPage")
        print("SmartSearchPage loaded.")

        print("--- DEBUG: Page Content ---")
        print(await page.content())
        print("--- END DEBUG ---")
        
        print("Attempting to fill form...")
        if fname:
            await page.fill('input[formcontrolname="firstName"]', fname)
        if lname:
            await page.fill('input[formcontrolname="lastName"]', lname)
        if phone:
            await page.fill('input[formcontrolname="mobileNumber"]', phone)
        print("Form fill attempted. Clicking search button...")
        await page.click('button.search-btn')
        print("Search button clicked.")

        await page.wait_for_url("**/LandingPage", timeout=15000)

        # STEP 3: Asset Profile
        print("Navigating to AssetProfilePage...")
        await page.goto("https://crmlite-dealer.truecorp.co.th/AssetProfilePage")
        billing_info = ""
        try:
            await page.wait_for_selector("div.asset-info", timeout=10000)
            billing_info = await page.inner_text("div.asset-info")
            print("Asset info found.")
        except:
            print("Asset info not found.")
            billing_info = ""

        await browser.close()
        print("Browser closed. Returning billing_info.")
        return billing_info
        
# ====== ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ======
def create_embed_result(fname, lname, phone, billing_text):
    embed = discord.Embed(
        title="üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
        description="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤",
        color=0x00b0f4
    )

    if fname and lname:
        embed.add_field(name="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢", value=f"{fname} {lname}", inline=False)
    if phone:
        embed.add_field(name="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", value=phone, inline=False)

    if not billing_text.strip():
        embed.add_field(name="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", value="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", inline=False)
        return embed

    lines = billing_text.split("\n")
    for line in lines:
        if "‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß" in line:
            embed.add_field(name="‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß", value=line.strip(), inline=False)
        elif "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" in line:
            embed.add_field(name="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", value=line.strip(), inline=False)

    return embed

# ====== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ======
bot.run(DISCORD_TOKEN)
