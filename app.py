import discord
from discord.ext import commands
from playwright.async_api import async_playwright
import asyncio
import os
from dotenv import load_dotenv

# ====== ‡πÇ‡∏´‡∏•‡∏î ENV (.env) ======
load_dotenv()

# ====== ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Environment Variables) ======
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
DEALER_USERNAME = os.getenv("DEALER_USERNAME")
DEALER_PASSWORD = os.getenv("DEALER_PASSWORD")

# ====== Discord Bot Setup ======
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ======
@bot.event
async def on_ready():
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß: {bot.user.name}")

@bot.command()
async def true(ctx, *args):
    # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Input ---
    phone, fname, lname = "", "", ""
    if len(args) == 1:
        phone = args[0]
    elif len(args) == 2:
        fname, lname = args
    else:
        await ctx.send("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏Ñ‡πà: `!true <‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£>` ‡∏´‡∏£‡∏∑‡∏≠ `!true <‡∏ä‡∏∑‡πà‡∏≠> <‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•>`")
        return

    # --- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ---
    result_data = await search_user_info(ctx, fname, lname, phone)

    # --- ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
    if result_data: 
        embed = create_embed_result(fname, lname, phone, result_data)
        try:
            await ctx.author.send(embed=embed)
            await ctx.send("`[8/8]` ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà DM ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
        except discord.Forbidden:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡∏´‡∏≤‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")

# =========== ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !clear (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ===============#
@bot.command()
@commands.has_permissions(manage_messages=True)
async def clear(ctx, amount: int = 5):
    """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 5)"""
    if ctx.channel.name != "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°":
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á #‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏° ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", delete_after=10)
        await asyncio.sleep(1)
        await ctx.message.delete()
        return

    deleted = await ctx.channel.purge(limit=amount + 1)
    await ctx.send(f"‚úÖ ‡∏•‡∏ö‡πÑ‡∏õ {len(deleted) - 1} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", delete_after=5)

@clear.error
async def clear_error(ctx, error):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á clear"""
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("üö´ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", delete_after=10)
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô `!clear 10`", delete_after=10)
    
    await asyncio.sleep(1)
    await ctx.message.delete()


# ====== [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Logic ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å) ======
async def search_user_info(ctx, fname, lname, phone):
    p = None
    browser = None
    page = None
    try:
        p = await async_playwright().start()
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        # STEP 1: Login ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        await ctx.send("`[1/7]` ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...")
        await page.goto("https://wzzo.truecorp.co.th/auth/realms/Dealer-Internet/protocol/openid-connect/auth?client_id=crmlite-prod-dealer&response_type=code&scope=openid%20profile&redirect_uri=https://crmlite-dealer.truecorp.co.th/&state=xyz&nonce=abc&response_mode=query&code_challenge_method=S256&code_challenge=AzRSFK3CdlHMiDq1DsuRGEY-p6EzTxexaIRyLphE9o4", timeout=60000)
        await page.fill('input[name="username"]', DEALER_USERNAME)
        await page.fill('input[name="password"]', DEALER_PASSWORD)
        await page.click('input[type="submit"]')
        
        try:
            await page.wait_for_url(lambda url: "/auth/" not in url, timeout=15000)
            await ctx.send("`[2/7]` ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        except Exception:
            await ctx.send("‚ÄºÔ∏è **Login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!**\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `DEALER_USERNAME` ‡πÅ‡∏•‡∏∞ `DEALER_PASSWORD` ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå `.env` ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            await page.screenshot(path="login_error.png", full_page=True)
            await ctx.send("‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤:", file=discord.File("login_error.png"))
            return None

        # STEP 2: ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await ctx.send("`[3/7]` ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...")
        await page.goto("https://crmlite-dealer.truecorp.co.th/SmartSearchPage", timeout=60000)
        try:
            await page.locator('button:has-text("OK")').click(timeout=5000)
        except Exception: pass
        
        search_value = phone if phone else f"{fname} {lname}"
        await ctx.send(f"`[4/7]` ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ '{search_value}'...")
        await page.fill("#SearchInput", search_value)
        await page.press("#SearchInput", 'Enter')
        
        # STEP 3: [‡πÉ‡∏´‡∏°‡πà] ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        await ctx.send(f"`[5/7]` ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...")
        # ‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° MuiCardActionArea-root ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô
        customer_card_selector = f'button.MuiCardActionArea-root:has-text("{search_value}")'
        await page.wait_for_selector(customer_card_selector, timeout=20000)
        await page.locator(customer_card_selector).first.click()
        
        # STEP 4: [‡πÉ‡∏´‡∏°‡πà] ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ TrueOnline
        await ctx.send("`[6/7]` ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ TrueOnline...")
        # ‡∏°‡∏≠‡∏á‡∏´‡∏≤ div ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ TrueOnline ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô div ‡∏ô‡∏±‡πâ‡∏ô
        service_container_selector = 'div:has-text("TrueOnline")'
        await page.wait_for_selector(service_container_selector, timeout=20000)
        await page.locator(service_container_selector).locator("button.MuiCardActionArea-root").first.click()

        # STEP 5: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Subscriber ‡πÅ‡∏•‡∏∞ Billing
        await ctx.send("`[7/7]` ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå...")
        
        subscriber_text = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Subscriber Profile"
        try:
            subscriber_container = page.locator('div:has-text("Subscriber Profile")').last
            await subscriber_container.wait_for(timeout=5000)
            subscriber_text = await subscriber_container.inner_text()
        except Exception: pass
            
        billing_text = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Billing Profile"
        try:
            billing_container = page.locator('div:has-text("Billing Profile")').last
            await billing_container.wait_for(timeout=5000)
            billing_text = await billing_container.inner_text()
        except Exception: pass
            
        return {'subscriber': subscriber_text, 'billing': billing_text}

    except Exception as e:
        error_message = f"‚ÄºÔ∏è **‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:**\n```\n{type(e).__name__}: {e}\n```"
        print(error_message) 
        if "Target closed" not in str(e):
             await ctx.send(error_message)
        if page and not page.is_closed():
            screenshot_path = "error_screenshot.png"
            await page.screenshot(path=screenshot_path, full_page=True)
            await ctx.send("‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:", file=discord.File(screenshot_path))
        return None

    finally:
        if browser:
            await browser.close()
        if p:
            await p.stop()
        print("Playwright browser and instance closed.")

# ====== ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ======
def create_embed_result(fname, lname, phone, result_data: dict):
    embed = discord.Embed(title="üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", description="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", color=0x00b0f4)
    embed.set_footer(text=f"‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠: {discord.utils.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC")

    search_query = phone if phone else f"{fname} {lname}"
    embed.add_field(name="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", value=search_query, inline=False)
    
    subscriber_info = result_data.get('subscriber', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    subscriber_info = subscriber_info.replace("Subscriber Profile", "").strip()
    embed.add_field(name="üë§ Subscriber Profile", value=f"```\n{subscriber_info}\n```", inline=False)
    
    billing_info = result_data.get('billing', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    billing_info = billing_info.replace("Billing Profile", "").strip()
    embed.add_field(name="üí≥ Billing Profile", value=f"```\n{billing_info}\n```", inline=False)

    return embed

# ====== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ======
if not DISCORD_TOKEN:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DISCORD_TOKEN ‡πÉ‡∏ô .env ‡πÑ‡∏ü‡∏•‡πå")
elif not DEALER_USERNAME or not DEALER_PASSWORD:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DEALER_USERNAME ‡∏´‡∏£‡∏∑‡∏≠ DEALER_PASSWORD ‡πÉ‡∏ô .env ‡πÑ‡∏ü‡∏•‡πå")
else:
    print("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó...")
    bot.run(DISCORD_TOKEN)
