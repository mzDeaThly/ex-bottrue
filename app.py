import discord
from discord.ext import commands
from playwright.async_api import async_playwright
import asyncio
import os
from dotenv import load_dotenv

# ====== ‡πÇ‡∏´‡∏•‡∏î ENV (.env) ======
load_dotenv()

# ====== ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Environment Variables) ======
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
DEALER_USERNAME = os.getenv("DEALER_USERNAME")
DEALER_PASSWORD = os.getenv("DEALER_PASSWORD")

# ====== Discord Bot Setup ======
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ======
@bot.event
async def on_ready():
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß: {bot.user.name}")

@bot.command()
async def true(ctx, *args):
    await ctx.send("`[1/8]` ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
    try:
        if len(args) == 1:
            phone = args[0]
            fname, lname = "", ""
        elif len(args) == 2:
            fname, lname = args
            phone = ""
        else:
            await ctx.send("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏Ñ‡πà: `!true <‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£>` ‡∏´‡∏£‡∏∑‡∏≠ `!true <‡∏ä‡∏∑‡πà‡∏≠> <‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•>`")
            return

        result = await search_user_info(ctx, fname, lname, phone)
        embed = create_embed_result(fname, lname, phone, result)
        await ctx.author.send(embed=embed)
        await ctx.send("`[8/8]` ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà DM ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

    except Exception as e:
        print(f"Error reached main handler: {e}")

@bot.command()
@commands.has_permissions(manage_messages=True)
async def clear(ctx, amount: int = 5):
    """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 5)"""
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if ctx.channel.name != "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°":
        await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á #‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏° ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", delete_after=10)
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !clear ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á
        await asyncio.sleep(1)
        await ctx.message.delete()
        return

    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ + ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !clear)
    deleted = await ctx.channel.purge(limit=amount + 1)
    await ctx.send(f"‚úÖ ‡∏•‡∏ö‡πÑ‡∏õ {len(deleted) - 1} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", delete_after=5)

@clear.error
async def clear_error(ctx, error):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á clear"""
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("üö´ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", delete_after=10)
        await asyncio.sleep(1)
        await ctx.message.delete()
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô `!clear 10`", delete_after=10)
        await asyncio.sleep(1)
        await ctx.message.delete()

# ====== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢) ======
async def search_user_info(ctx, fname, lname, phone):
    page = None
    browser = None
    try:
        # async with async_playwright() as p: # Comment this line out if playwright is managed outside
        p = await async_playwright().start() # Use this line if playwright is managed outside
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()
            
        # STEP 1: Login
        await page.goto("https://wzzo.truecorp.co.th/auth/realms/Dealer-Internet/protocol/openid-connect/auth?client_id=crmlite-prod-dealer&response_type=code&scope=openid%20profile&redirect_uri=https://crmlite-dealer.truecorp.co.th/&state=xyz&nonce=abc&response_mode=query&code_challenge_method=S256&code_challenge=AzRSFK3CdlHMiDq1DsuRGEY-p6EzTxexaIRyLphE9o4", timeout=60000)
        await page.fill('input[name="username"]', DEALER_USERNAME)
        await page.fill('input[name="password"]', DEALER_PASSWORD)
        await page.click('input[type="submit"]')

        # STEP 2: Smart Search
        await page.goto("https://crmlite-dealer.truecorp.co.th/SmartSearchPage", timeout=60000)
            
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Pop-up (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        try:
            await page.locator('button:has-text("OK")').click(timeout=5000)
        except Exception:
            pass # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ Pop-up ‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£

        # ‡∏£‡∏≠, ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡πÅ‡∏•‡∏∞‡∏Å‡∏î Enter
        search_box_selector = "#SearchInput"
        await page.wait_for_selector(search_box_selector, timeout=60000)
            
        search_value = phone if phone else f"{fname} {lname}"
        await page.fill(search_box_selector, search_value)
        
        # --- [‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---
        # ‡∏Å‡∏î Enter ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°
        await page.press(search_box_selector, 'Enter')
        
        # ‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await page.wait_for_url("**/LandingPage", timeout=30000)
        await page.goto("https://crmlite-dealer.truecorp.co.th/AssetProfilePage")
            
        await page.wait_for_selector("div.asset-info", timeout=10000) # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        billing_info = await page.inner_text("div.asset-info")
        await browser.close()
        await p.stop() # Use this line if playwright is managed outside
        return billing_info

    except Exception as e:
        await ctx.send(f"‚ÄºÔ∏è **‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô:**\n```\n{e}\n```")
        if page:
            await page.screenshot(path="final_error.png", full_page=True)
            await ctx.send("‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:", file=discord.File("final_error.png"))
        if browser:
            await browser.close()
        # await p.stop() # Use this line if playwright is managed outside
        raise e

# ====== ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ======
def create_embed_result(fname, lname, phone, billing_text):
    embed = discord.Embed(title="üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", description="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", color=0x00b0f4)

    if fname and lname:
        embed.add_field(name="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢", value=f"{fname} {lname}", inline=False)
    if phone:
        embed.add_field(name="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", value=phone, inline=False)

    if not billing_text or not billing_text.strip():
        embed.add_field(name="‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", value="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", inline=False)
        return embed

    found_specific_fields = False
    lines = billing_text.split("\n")
    for line in lines:
        if "‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß" in line:
            embed.add_field(name="‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß", value=line.strip(), inline=False)
            found_specific_fields = True
        elif "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" in line:
            embed.add_field(name="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", value=line.strip(), inline=False)
            found_specific_fields = True
            
    if not found_specific_fields:
        embed.add_field(name="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö", value=f"```\n{billing_text}\n```", inline=False)

    return embed

# ====== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ======
if not DISCORD_TOKEN:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DISCORD_TOKEN")
else:
    print("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó...")
    bot.run(DISCORD_TOKEN)
